#version 330 core

in vec3 FragPos;  
in vec3 Normal;

out vec4 FragColor;

uniform vec3 m_ambient;
uniform vec3 m_diffuse;
uniform vec3 m_specular;
float shininess=256;
uniform vec3 v_position;
uniform vec3 l_position;
uniform vec3 l_ambient;
uniform vec3 l_diffuse;
uniform vec3 l_specular;
uniform vec3 l_attenuation;

vec3 calculateLighting(){
	//ambient
     vec3 ambient = m_ambient*l_ambient;
     	
	//diffuse
     vec3 norm = normalize(Normal);
     vec3 lightDir = normalize(l_position-FragPos);
     float diff = max(dot(Normal, lightDir), 0.0); 
     vec3 diffuse = l_diffuse * diff*m_diffuse;

	//specular
     vec3 viewDir = normalize(v_position-FragPos);
     vec3 reflectDir = reflect(-lightDir, norm);
     float spec = pow(max(dot(viewDir,reflectDir),0.0),shininess); 
     vec3 specular = l_specular *spec *m_specular;

	//distance and attenuation
     float d = length(l_position-FragPos);
     float attenuation = 1.0/(l_attenuation.x+l_attenuation.y*d+l_attenuation.z*d*d);

     return (ambient + diffuse+ specular) * attenuation;
}

void main()
{
    vec3 result = calculateLighting();
    FragColor = vec4(result, 1.0);
} 
